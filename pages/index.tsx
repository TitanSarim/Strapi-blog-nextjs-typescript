import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { Axios, AxiosResponse } from 'axios';
import {Tabs, PostList, Pagination} from '../components'
import qs from 'qs';

// getting response 
import {fetchCategories, fetchPosts} from '../http'
import {ICollectionResponse, ICategory, IPost, IPagination, IQueryOptions} from '../types'
import { useRouter } from 'next/router';
import { debounce } from '../utils';

interface IPropTypes{
  categories: {
    items: ICategory[];
  };

  posts:{
    items: IPost[];
    pagination: IPagination;
  }

}

const Home: NextPage<IPropTypes> = ({categories, posts}) => {

  const router = useRouter();

  const {page, pageCount} = posts.pagination;

  const handleSearch = (query: string) => {
      router.push(`/?search=${query}`);
  }

  return (
    <div>
      <Head>
        <title>Strapi Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <main >
        <h1 className='text-primary-dark'>
          Welcome to strapi blog
        </h1>
      </main>


      <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch, 500)}/>
      <PostList posts={posts.items}/>
      <Pagination page={page} pageCount={pageCount}/>

    </div>
  )
};

// get categories and render on server side 

export const getServerSideProps: GetServerSideProps= async ({query}) =>{

  // rename data as categories
  const {data: categories}: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();

  // fetch articles and rename them
  // POPULATE AUTHOR FROM api
  
  const options: Partial<IQueryOptions> = {
    populate: ['Image', 'author.avatar'],
    
    sort: ['id:desc'],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 12,
    },
  };

  if(query.search){
    options.filters = {
      Title:{
        $containsi: query.search,
      }
    }
  }


  const queryString = qs.stringify(options);

  const {data: posts}: AxiosResponse<ICollectionResponse<IPost[]>> = await fetchPosts(queryString);

  return{
    props:{ 

      categories:{
        items: categories.data
      },

      posts:{
        items: posts.data,
        pagination: posts.meta.pagination,
      },

    } 
  }

}


export default Home
