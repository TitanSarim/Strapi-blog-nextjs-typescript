import { AxiosResponse } from 'axios'
import { GetServerSideProps } from 'next'
import { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote'
import Head from 'next/head'
import Image from 'next/image'
import router from 'next/router'
import qs from 'qs'
import QueryString from 'qs'
import React from 'react'
import { Tabs } from '../../components'
import { fetchCategories, fetchPostBySlug } from '../../http'
import { ICategory, ICollectionResponse, IPagination, IPost } from '../../types'
import { debounce, formatDate, serializeMarkDown } from '../../utils'

import {AiOutlineTwitter, AiOutlineInstagram} from 'react-icons/ai'
import {FaFacebook} from 'react-icons/fa'


interface IPropType{
    post: IPost;
    notFound?: boolean;
    
    categories:{
        items: ICategory[],
        pagination: IPagination,
      },
}   

const slug = ({categories, post, notFound=false}: IPropType) => {

    const handleSearch = (query: string) => {
        router.push(`/?search=${query}`);
    }


  return (
   <>
        <Head>
            <title>{post.attributes.Title}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>

        <div>
            <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch, 500)}/>
        </div>

        <div className='my-12 grid lg:grid-cols-3 gap-12 single-article'>
            <div className='col-span-2'>
                <h1 className='text-3xl font-bold'>{post.attributes.Title}</h1>

                <div className='flex items-center my-4'>
                    <div className='rounded-lg overflow-hidden flex items-center justify-center mr-2'>
                        <Image 
                            src={`http://localhost:1337${post.attributes.author.data.attributes.avatar.data.attributes.formats.thumbnail.url}`}
                            height={40}
                            width={40}
                        />
                    </div>


                    <span className='text-sm font-bold text-gray-600'>
                        {post.attributes.author.data.attributes.firstname}{' '}
                        {post.attributes.author.data.attributes.lastname} on &nbsp;

                        <span className='text-gray-400 '>
                            {formatDate(post.attributes.createdAt)}
                        </span>

                    </span>
                </div>

                <div className='text-lg text-gray-600 leading-8'>
                    <img
                        className='w-full my-12 mb-6 '
                        src={`http://localhost:1337${post.attributes.Image.data.attributes.url}`}
                        alt={post.attributes.Title}
                       
                    />

                    <MDXRemote
                        {...post.attributes.body as MDXRemoteSerializeResult} 
                    />


                </div>


            </div>
            <div className="sticky top-0">
                    <h2 className="font-bold text-gray-600 text-lg">
                        Signup to our newsletter
                    </h2>
                    <p className="mt-4 text-gray-500">
                        Get the latest article on all things data delivered
                        straight to your inbox
                    </p>
                    <input
                        className="border w-full p-2 pl-3 my-6 outline-primary"
                        type="email"
                        placeholder="Your work email"
                    />
                    <button className="border-2 border-primary rounded py-1 px-6 text-primary font-bold">
                        Subscribe
                    </button>

                    <hr className="my-6 border-gray-100" />

                    <span className="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">

                        <span className="text-gray-500 mr-2">Share</span>

                        <a className="text-red-300">
                            <FaFacebook size={23}/>
                        </a>

                        <a className="ml-3 text-red-300 ">
                           <AiOutlineInstagram size={23} />
                        </a>

                        <a className="ml-3 text-red-300">
                           <AiOutlineTwitter size={23}/>
                        </a>
                        
                    </span>
                    <hr className="my-6 border-gray-100" />
                </div>

        </div>
   </>
  )
}



export const getServerSideProps: GetServerSideProps = async ({query}) => {

    const QueryString = qs.stringify({
        populate: ['Image', 'author.avatar'],
        filter:{
            Slug:{
                $eq: query.slug
            }
        }
    })

    const {data: posts}: AxiosResponse<ICollectionResponse<IPost[]>> = await fetchPostBySlug(QueryString);
    
    const {data: categories}: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();

    if(posts.data.length === 0){
        return {
            notFound: true,
        };
    }

    return{
        props:{
            post: await serializeMarkDown(posts.data[0]),
            
            categories:{
                items: categories.data
              },
        
              posts:{
                items: posts.data,
                pagination: posts.meta.pagination,
              },
        }

    }


}

export default slug

function handleSearch(handleSearch: any, arg1: number): (query: String) => void {
    throw new Error('Function not implemented.')
}
